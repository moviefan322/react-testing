[{"content":"import { render, screen } from '@testing-library/react';\n\nfunction ColorList() {\n  return (\n    <ul>\n      <li>Red</li>\n      <li>Blue</li>\n      <li>Green</li>\n    </ul>\n  );\n}\n\nrender(<ColorList />)","type":"code","id":"ft4r8"},{"content":"test('getBy, queryBy, findBy finding 0 elements', async () => {\n  render(<ColorList />);\n\n  // getByRole!\n  expect(() => screen.getByRole('textbox')).toThrow();\n\n  // queryByRole!\n  expect(screen.queryByRole('textbox')).toEqual(null)\n\n  // findByRole!\n  let errorThrown = false\n  try {\n  await screen.findByRole('textbox')\n  } catch (err) {\n    errorThrown = true\n  }\n\n  expect(errorThrown).toEqual(true)\n});","type":"code","id":"i4yxa"},{"content":"test('getBy, queryBy, findBy when they find 1 element', async () => {\n  render(<ColorList />)\n\n  expect(\n    screen.getByRole('list')\n  ).toBeInTheDocument()\n\n  expect(\n    screen.queryByRole('list')\n  ).toBeInTheDocument()\n\n  expect(\n    await screen.findByRole('list')\n  ).toBeInTheDocument()\n})","type":"code","id":"373v8"},{"content":"test('getBy, queryBy, findBy when finding > 1 elements', async () => {\nrender(<ColorList />)\n\n  expect(() => screen.getByRole('listitem')).toThrow();\n\n  // queryByRole!\n  expect(\n    () => screen.queryByRole('listitem')).toThrow()\n\n  // findByRole!\n  let errorThrown = false\n  try {\n  await screen.findByRole('listitem')\n  } catch (err) {\n    errorThrown = true\n  }\n\n  expect(errorThrown).toEqual(true)\n\n})","type":"code","id":"3m17l"},{"content":"test('getAll, queryAllBy, findAllBy', async () => {\n  render(<ColorList />)\n\n  expect(\n    screen.getAllByRole('listitem')\n  ).toHaveLength(3)\n\n  expect(\n    screen.queryAllByRole('listitem')\n  ).toHaveLength(3)\n\n  expect(\n    await screen.findAllByRole('listitem')\n  ).toHaveLength(3)\n})","type":"code","id":"tjaq8"},{"content":"test('favor using getBy to prove an element exists', () => {\n  render(<ColorList />)\n\n  const element = screen.getByRole('list')\n\n  expect(element).toBeInTheDocument()\n})","type":"code","id":"buvq3"},{"content":"test('favor queryBy when proving an element does not exist', () => {\n  render(<ColorList />)\n\n  const element = screen.queryByRole('textbox')\n\n  expect(element).not.toBeInTheDocument()\n})","type":"code","id":"gvaja"},{"content":"import { useState, useEffect } from 'react';\n\nfunction fakeFetchColors() {\n  return Promise.resolve(['red', 'green', 'blue']);\n}\n\nfunction LoadableColorList() {\n  const [colors, setColors] = useState([]);\n\n  useEffect(() => {\n    fakeFetchColors().then((c) => setColors(c));\n  }, []);\n\n  const renderedColors = colors.map((color) => {\n    return <li key={color}>{color}</li>;\n  });\n\n  return <ul>{renderedColors}</ul>;\n}\n\nrender(<LoadableColorList />)","type":"code","id":"tnmmd"},{"content":"test('Favor findBy or findAllBy when data fetching', async () => {\nrender(<LoadableColorList />)\n\nconst els = await screen.findAllByRole('listitem')\n\nexpect(els).toHaveLength(3)\n\n})","type":"code","id":"yw527"}]